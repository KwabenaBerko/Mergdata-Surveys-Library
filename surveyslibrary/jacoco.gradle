apply plugin: 'jacoco'

def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*_*Factory*.*',
        '**/*_Module*.*',
        '**/*_ViewBinding*.*',
        '**/*_MembersInjector*.*',
        '**/*_Provide*.*',
        '**/Dagger*.*',
        '**/*Database_Impl*.*',
        '**/*Dao_Impl*.*',
        '**/di/*'
]

def javaClasses = fileTree(dir: "$project.buildDir/intermediates/javac/debug/compileDebugJavaWithJavac/classes",
        excludes: fileFilter
)
def kotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug",
        excludes: fileFilter
)

def coverageSourceDirs = [
        "$project.projectDir/src/main/java"
]

def sourceDirs = files([coverageSourceDirs])
def classDirs = files([javaClasses], [kotlinClasses])
def executionDataDirs = fileTree(dir: project.buildDir, includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
])

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'connectedAndroidTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    sourceDirectories.from = sourceDirs
    classDirectories.from = classDirs
    additionalSourceDirs.from = sourceDirs
    executionData.from = executionDataDirs

}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: ["jacocoTestReport"]){

    sourceDirectories.from = sourceDirs
    classDirectories.from = classDirs
    additionalSourceDirs.from = sourceDirs
    executionData.from = executionDataDirs

    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
    }
}


task copyJacocoXMLFileToRoot(type: Copy) {
    from "build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    into '../'
    rename { String fileName ->
        fileName.replace("jacocoTestReport.xml", "jacoco.xml")
    }
    filter { line -> line.replaceAll("co/", "app/src/main/java/co/") }
}



jacocoTestCoverageVerification.finalizedBy copyJacocoXMLFileToRoot
