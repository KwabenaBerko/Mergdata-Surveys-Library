apply plugin: 'jacoco-android'

def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*_*Factory*.*',
        '**/*_Module*.*',
        '**/*_ViewBinding*.*',
        '**/*_MembersInjector*.*',
        '**/*_Provide*.*',
        '**/Dagger*.*',
        '**/*Database_Impl*.*',
        '**/*Dao_Impl*.*',
        '**/di/*'
]

jacoco {
    toolVersion = "0.8.4"
}


jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled true

    excludes += fileFilter

}


tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}



task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: "jacocoTestReport") {


    buildDir = "../app/build"

    def coverageSourceDirs = [
            "${project.projectDir}/src/main/java"
    ]

    def javaClasses = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: fileFilter
    )


    classDirectories.from = files([ javaClasses ])
    additionalSourceDirs.from = files(coverageSourceDirs)
    sourceDirectories.from = files(coverageSourceDirs)


    executionData.from = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*.ec",
            "output/code_coverage/connected/*.ec"
    ])


    violationRules {
        rule {
            limit {
                minimum = 0.01
            }
        }
    }
}

task copyJacocoXMLFileToRoot(type: Copy) {
    from "build/reports/jacoco/jacocoTestDebugUnitTestReport/jacocoTestDebugUnitTestReport.xml"
    into '../'
    rename { String fileName ->
        fileName.replace("jacocoTestDebugUnitTestReport.xml", "jacoco.xml")
    }
    filter { line -> line.replaceAll("co/", "app/src/main/java/co/") }
}



jacocoTestCoverageVerification.finalizedBy copyJacocoXMLFileToRoot
